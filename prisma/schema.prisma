generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Automotive Business Structure
model GrupoAutomotriz {
  id           Int      @id @default(autoincrement())
  nombreGrupo  String
  logo         String?
  direccion    String?
  email        String?
  paginaWeb    String?
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  marcas       Marca[]
  usuarios     User[]
  
  @@map("grupos_automotrices")
}

model Marca {
  id          Int      @id @default(autoincrement())
  nombreMarca String
  logo        String?
  grupoId     Int
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  grupo       GrupoAutomotriz @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  agencias    Agencia[]
  usuarios    User[]
  
  @@map("marcas")
}

model Agencia {
  id            Int      @id @default(autoincrement())
  nombreAgencia String
  marcaId       Int
  direccion     String?
  telefono      String?
  email         String?
  gerente       String?
  logo          String?
  activo        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Nuevos campos para control de pagos y servicios IA
  estadoPago           String   @default("ACTIVO") // "ACTIVO", "SUSPENDIDO", "MOROSO"
  tierServicio         String   @default("BASICO") // "BASICO", "PROFESIONAL", "PREMIUM"
  fechaUltimoPago      DateTime?
  limiteGrabacionesMes Int      @default(100)      // Límite mensual de grabaciones
  grabacionesUsadas    Int      @default(0)       // Contador mensual
  costosPorGrabacion   Decimal  @default(2.50) @db.Decimal(10, 2) // Costo por grabación
  saldoPendiente       Decimal  @default(0) @db.Decimal(12, 2)    // Saldo pendiente
  
  marca         Marca     @relation(fields: [marcaId], references: [id], onDelete: Cascade)
  usuarios      User[]
  prospectos    Prospecto[]
  vehiculos     Vehiculo[]
  metricasVentas MetricaVenta[]
  facturas      Factura[]
  
  // Nuevas relaciones gerenciales
  workflows     AutomatizacionWorkflow[]
  forecasts     Forecast[]
  reportes      ReporteGerencial[]
  
  // Relaciones CRM externo
  configuracionesCrm CrmConfiguration[]
  
  // Relaciones Grabación por Proximidad
  zonasProximidad   ZonaProximidad[]
  metricasProximidad MetricasProximidad[]
  
  @@map("agencias")
}

// User and Role System
enum TipoRol {
  DIRECTOR_GENERAL
  DIRECTOR_MARCA
  GERENTE_GENERAL
  GERENTE_VENTAS
  VENDEDOR
  COORDINADOR_LEADS
  CENTRO_LEADS        // Solo recibe llamadas entrantes y visitas - NO SPCC
  MARKETING_DIGITAL   // Maneja redes, plataformas digitales, página web
  TELEMARKETING       // Hace llamadas a base de datos de clientes
  DYNAMICFIN_ADMIN
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  nombre        String
  apellido      String?
  password      String
  rol           TipoRol
  agenciaId     Int?
  marcaId       Int?
  grupoId       Int?
  activo        Boolean    @default(true)
  emailVerified DateTime?
  image         String?
  cargaProspectos Int      @default(0)  // Campo para balanceo de carga de prospectos
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Business relations
  agencia       Agencia?         @relation(fields: [agenciaId], references: [id])
  marca         Marca?           @relation(fields: [marcaId], references: [id])
  grupo         GrupoAutomotriz? @relation(fields: [grupoId], references: [id])
  prospectosVendedor    Prospecto[] @relation("ProspectosVendedor")
  prospectosCoordinador Prospecto[] @relation("ProspectosCoordinador")
  interacciones Interaccion[]
  
  // Nuevas relaciones gerenciales
  metas                     MetaVendedor[]
  esquemaComision           EsquemaComision[]
  comisiones                RegistroComision[]
  reasignacionesAnterior    ReasignacionLead[] @relation("ReasignacionesAnterior")
  reasignacionesNuevo       ReasignacionLead[] @relation("ReasignacionesNuevo")
  reasignacionesGerente     ReasignacionLead[] @relation("ReasignacionesGerente")
  workflowEjecuciones       EjecucionWorkflow[] @relation("WorkflowEjecuciones")
  forecastVendedor          ForecastVendedor[] @relation("ForecastVendedor")
  sesionesCoachingVendedor  SesionCoaching[] @relation("CoachingVendedor")
  sesionesCoachingGerente   SesionCoaching[] @relation("CoachingGerente")
  grabaciones               GrabacionConversacion[] @relation("GrabacionesVendedor")
  alertas                   AlertaSistema[] @relation("AlertasUsuario")
  
  // Relaciones específicas para Centro de Leads (depreciadas - usar las nuevas)
  // registrosLlamada          RegistroLlamada[] @relation("LlamadasCoordinador")
  // visitasShowroom           VisitaShowroom[] @relation("VisitasCoordinador")  
  asignacionesRealizadas    AsignacionLead[] @relation("AsignacionesCoordinador")
  asignacionesRecibidas     AsignacionLead[] @relation("AsignacionesVendedor")
  
  // Nuevas relaciones para sistema de vendedores de guardia
  vendedoresGuardia         VendedorGuardia[] @relation("VendedoresGuardia")
  registrosLlamadasEntrantes RegistroLlamadaEntrante[] @relation("LlamadasEntrantesCoordinador")
  visitasShowroomRecibidas  VisitaShowroom[] @relation("VisitasShowroomCoordinador")
  alertasDesbalance         AlertaDesbalance[] @relation("AlertasDesbalanceUsuario")
  alertasDesbalanceVendedor AlertaDesbalance[] @relation("AlertasDesbalanceVendedor")
  
  // Relaciones CRM externo
  crmSyncLogs               CrmSyncLog[] @relation("CrmSyncLogUsuario")
  
  // Relaciones Grabación por Proximidad
  configuracionesProximidad ConfiguracionProximidad[] @relation("ConfiguracionProximidadVendedor")
  grabacionesProximidad     GrabacionProximidad[] @relation("GrabacionProximidadVendedor")
  logsProximidad            LogProximidad[] @relation("LogProximidadVendedor")
  
  // Relaciones Role Play
  rolePlaySessions          RolePlaySession[] @relation("RolePlaySessionsVendedor")
  rolePlayEvaluations       RolePlayEvaluation[] @relation("RolePlayEvaluationsVendedor")
  rolePlayProgress          RolePlayProgress[] @relation("RolePlayProgressVendedor")
  rolePlayFeedback          RolePlayFeedback[] @relation("RolePlayFeedbackVendedor")
  
  @@map("usuarios")
}

// SPPC (Sistema de Perfilamiento y Potencial de Cliente) - 15 Pillars System
model Pilar {
  id                Int      @id @default(autoincrement())
  nombrePilar       String
  descripcion       String?
  pesoEstrategico   Decimal  @db.Decimal(5, 4) // e.g., 0.1500 for 15%
  faseEvaluacion    Int      // 1, 2, or 3
  activo            Boolean  @default(true)
  
  calificaciones    Calificacion[]
  
  @@map("pilares")
}

model Prospecto {
  id                 Int       @id @default(autoincrement())
  nombre             String
  apellido           String?
  email              String?
  telefono           String?
  vendedorId         String?   // Ahora opcional para leads pendientes de asignación
  agenciaId          Int
  estatus            String    @default("Nuevo") // "Nuevo", "PENDIENTE_CALIFICACION", "Contactado", "Calificado", "Perdido", "Vendido"
  calificacionTotal  Decimal   @default(0.00) @db.Decimal(5, 2)
  clasificacion      String?   // "Elite", "Calificado", "A Madurar", "Explorador"
  vehiculoInteres    String?   // Mantener para compatibilidad - texto libre
  vehiculoInteresId  Int?      // Nueva referencia al catálogo
  presupuesto        Decimal?  @db.Decimal(12, 2)
  fechaContacto      DateTime  @default(now())
  proximaSeguimiento DateTime?
  notas              String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Campos específicos para Centro de Leads
  origenLead         String?   // "LLAMADA_ENTRANTE", "VISITA_SHOWROOM", "OTROS"
  estadoAsignacion   String    @default("PENDIENTE") // "PENDIENTE", "ASIGNADO", "CONTACTADO"
  coordinadorId      String?   // ID del coordinador que captó el lead
  fechaAsignacion    DateTime?
  nivelUrgencia      String    @default("MEDIA") // "BAJA", "MEDIA", "ALTA"
  tiempoEsperado     String?   // "INMEDIATO", "1_SEMANA", "1_MES", "FLEXIBLE"
  acompanantes       String?   // "SOLO", "PAREJA", "FAMILIA", "AMIGOS"
  
  vendedor           User?           @relation("ProspectosVendedor", fields: [vendedorId], references: [id])
  coordinador        User?           @relation("ProspectosCoordinador", fields: [coordinadorId], references: [id])
  agencia            Agencia        @relation(fields: [agenciaId], references: [id])
  vehiculoCatalogo   VehiculoCatalogo? @relation("VehiculoInteresProspectos", fields: [vehiculoInteresId], references: [id])
  calificaciones     Calificacion[]
  interacciones      Interaccion[]
  
  // Nuevas relaciones gerenciales
  reasignaciones     ReasignacionLead[]
  workflowEjecuciones EjecucionWorkflow[]
  grabaciones        GrabacionConversacion[]
  comisiones         RegistroComision[]
  
  // Relaciones específicas para Centro de Leads
  // registroLlamada    RegistroLlamada?  // Depreciado
  // visitaShowroom     VisitaShowroom?   // Depreciado
  
  // Nuevas relaciones para Centro de Leads
  llamadasEntrantes  RegistroLlamadaEntrante[] @relation("LlamadaEntrante")
  visitasShowroomNuevas VisitaShowroom[] @relation("VisitaShowroom")
  asignacionLead     AsignacionLead? @relation("AsignacionesProspecto")
  
  // Relaciones Grabación por Proximidad
  grabacionesProximidad GrabacionProximidad[] @relation("GrabacionProximidadProspecto")
  
  @@map("prospectos")
}

model Calificacion {
  id               Int      @id @default(autoincrement())
  prospectoId      Int
  pilarId          Int
  puntajeObtenido  Int      @default(0) // 0-100
  notas            String?
  updatedAt        DateTime @default(now()) @updatedAt
  
  prospecto        Prospecto @relation(fields: [prospectoId], references: [id], onDelete: Cascade)
  pilar            Pilar     @relation(fields: [pilarId], references: [id])
  
  @@unique([prospectoId, pilarId])
  @@map("calificaciones")
}

model Interaccion {
  id           Int      @id @default(autoincrement())
  prospectoId  Int
  usuarioId    String
  tipoContacto String   // "Visita en Piso", "Llamada", "WhatsApp", "Email", etc.
  fecha        DateTime @default(now())
  duracion     Int?     // minutos
  resultado    String?  // "Positivo", "Neutro", "Negativo"
  notas        String?
  proximaAccion String?
  fechaProximaAccion DateTime?
  
  prospecto    Prospecto @relation(fields: [prospectoId], references: [id], onDelete: Cascade)
  usuario      User      @relation(fields: [usuarioId], references: [id])
  
  @@map("interacciones")
}

// Vehicle Catalog (Simplified vehicle identification without prices)
model VehiculoCatalogo {
  id              Int      @id @default(autoincrement())
  marca           String
  modelo          String
  year            Int
  activo          Boolean  @default(true)
  fechaCreacion   DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  
  // Relaciones con prospectos y visitas
  prospectos      Prospecto[] @relation("VehiculoInteresProspectos")
  visitasShowroom VisitaShowroom[] @relation("VisitasVehiculoCatalogo")
  
  @@unique([marca, modelo, year])
  @@map("vehiculos_catalogo")
}

// Vehicle Management (Existing inventory with prices)
model Vehiculo {
  id              Int     @id @default(autoincrement())
  agenciaId       Int
  marca           String
  modelo          String
  year            Int
  version         String?
  precio          Decimal @db.Decimal(12, 2)
  color           String?
  kilometraje     Int?
  estatus         String  @default("Disponible") // "Disponible", "Vendido", "Apartado"
  numeroSerie     String? @unique
  imagen          String?
  fechaIngreso    DateTime @default(now())
  
  agencia         Agencia @relation(fields: [agenciaId], references: [id])
  
  @@map("vehiculos")
}

// Metrics and KPIs
model MetricaVenta {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int
  mes                   Int
  year                  Int
  ventasRealizadas      Int      @default(0)
  metaVentas            Int
  prospectosProcesados  Int      @default(0)
  tasaConversion        Decimal? @db.Decimal(5, 2) // percentage
  utilidadPromedio      Decimal? @db.Decimal(12, 2)
  vendedoresActivos     Int      @default(0)
  optimizacionesProcesadas Int   @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  agencia               Agencia  @relation(fields: [agenciaId], references: [id])
  
  @@unique([agenciaId, mes, year])
  @@map("metricas_ventas")
}

// ================== NUEVAS FUNCIONALIDADES GERENCIALES ==================

// Metas y Objetivos por Vendedor
model MetaVendedor {
  id              Int      @id @default(autoincrement())
  vendedorId      String
  mes             Int
  year            Int
  metaAutos       Int      @default(0)
  metaIngresos    Decimal  @default(0) @db.Decimal(12, 2)
  autosVendidos   Int      @default(0)
  ingresosReales  Decimal  @default(0) @db.Decimal(12, 2)
  porcentajeCumplimiento Decimal @default(0) @db.Decimal(5, 2)
  especialidad    String? // "SUVs Premium", "Autos Compactos", etc.
  activo          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  vendedor        User     @relation(fields: [vendedorId], references: [id])
  
  @@unique([vendedorId, mes, year])
  @@map("metas_vendedores")
}

// Esquemas de Comisiones Personalizables
model EsquemaComision {
  id                    Int      @id @default(autoincrement())
  vendedorId            String
  nombre                String   // "Senior", "Regular", "En Desarrollo"
  porcentajeBase        Decimal  @db.Decimal(5, 4) // ej: 0.0500 = 5%
  bonoVolumen           Decimal  @default(0) @db.Decimal(10, 2) // pesos por auto extra
  bonoMargen            Decimal  @default(0) @db.Decimal(10, 2) // pesos por margen alto
  incentiveReferencia   Decimal  @default(0) @db.Decimal(10, 2) // pesos por referencia
  incentiveMejora       Decimal  @default(0) @db.Decimal(10, 2) // pesos por mejora mensual
  fechaInicio           DateTime @default(now())
  fechaFin              DateTime?
  activo                Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  vendedor              User     @relation(fields: [vendedorId], references: [id])
  comisionesGeneradas   RegistroComision[]
  
  @@map("esquemas_comisiones")
}

// Registro de Comisiones Generadas
model RegistroComision {
  id                Int      @id @default(autoincrement())
  vendedorId        String
  esquemaComisionId Int
  prospectoId       Int?
  mes               Int
  year              Int
  tipoComision      String   // "base", "volumen", "margen", "referencia", "mejora"
  montoVenta        Decimal  @db.Decimal(12, 2)
  porcentaje        Decimal  @db.Decimal(5, 4)
  montoComision     Decimal  @db.Decimal(10, 2)
  pagado            Boolean  @default(false)
  fechaPago         DateTime?
  notas             String?
  createdAt         DateTime @default(now())
  
  vendedor          User     @relation(fields: [vendedorId], references: [id])
  esquemaComision   EsquemaComision @relation(fields: [esquemaComisionId], references: [id])
  prospecto         Prospecto? @relation(fields: [prospectoId], references: [id])
  
  @@map("registros_comisiones")
}

// Reasignaciones de Leads
model ReasignacionLead {
  id                  Int      @id @default(autoincrement())
  prospectoId         Int
  vendedorAnteriorId  String
  vendedorNuevoId     String
  gerenteId           String   // Quien autorizó la reasignación
  motivoReasignacion  String
  comentarios         String?
  fechaReasignacion   DateTime @default(now())
  
  prospecto           Prospecto @relation(fields: [prospectoId], references: [id])
  vendedorAnterior    User     @relation("ReasignacionesAnterior", fields: [vendedorAnteriorId], references: [id])
  vendedorNuevo       User     @relation("ReasignacionesNuevo", fields: [vendedorNuevoId], references: [id])
  gerente             User     @relation("ReasignacionesGerente", fields: [gerenteId], references: [id])
  
  @@map("reasignaciones_leads")
}

// Automatizaciones y Workflows
model AutomatizacionWorkflow {
  id              Int      @id @default(autoincrement())
  agenciaId       Int
  nombre          String
  tipoTrigger     String   // "tiempo_sin_contacto", "lead_entrada", "etapa_sppc", "vendedor_sobrecarga"
  condiciones     String   @db.Text // JSON con condiciones
  acciones        String   @db.Text // JSON con acciones a ejecutar
  activo          Boolean  @default(true)
  ultimaEjecucion DateTime?
  vecesEjecutado  Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  agencia         Agencia  @relation(fields: [agenciaId], references: [id])
  ejecuciones     EjecucionWorkflow[]
  
  @@map("automatizaciones_workflows")
}

// Log de Ejecuciones de Workflows
model EjecucionWorkflow {
  id            Int      @id @default(autoincrement())
  workflowId    Int
  prospectoId   Int?
  vendedorId    String?
  resultado     String   // "exitoso", "error", "omitido"
  detalles      String?  @db.Text
  fechaEjecucion DateTime @default(now())
  
  workflow      AutomatizacionWorkflow @relation(fields: [workflowId], references: [id])
  prospecto     Prospecto? @relation(fields: [prospectoId], references: [id])
  vendedor      User?      @relation("WorkflowEjecuciones", fields: [vendedorId], references: [id])
  
  @@map("ejecuciones_workflows")
}

// Forecasting y Proyecciones
model Forecast {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int
  mes                   Int
  year                  Int
  metaVentas            Int
  forecastVentas        Int
  confianzaPorcentaje   Decimal  @db.Decimal(5, 2)
  ingresosProyectados   Decimal  @db.Decimal(12, 2)
  comisionesProyectadas Decimal  @db.Decimal(12, 2)
  factoresConsiderados  String   @db.Text // JSON con factores
  fechaGeneracion       DateTime @default(now())
  ultimaActualizacion   DateTime @updatedAt
  
  agencia               Agencia  @relation(fields: [agenciaId], references: [id])
  forecastVendedores    ForecastVendedor[]
  
  @@unique([agenciaId, mes, year])
  @@map("forecasts")
}

// Forecast Individual por Vendedor
model ForecastVendedor {
  id                Int      @id @default(autoincrement())
  forecastId        Int
  vendedorId        String
  metaIndividual    Int
  forecastIndividual Int
  confianza         Decimal  @db.Decimal(5, 2)
  ingresosProyectados Decimal @db.Decimal(12, 2)
  comisionProyectada Decimal  @db.Decimal(10, 2)
  
  forecast          Forecast @relation(fields: [forecastId], references: [id])
  vendedor          User     @relation("ForecastVendedor", fields: [vendedorId], references: [id])
  
  @@unique([forecastId, vendedorId])
  @@map("forecast_vendedores")
}

// Sesiones de Coaching
model SesionCoaching {
  id              Int      @id @default(autoincrement())
  vendedorId      String
  gerenteId       String
  tipoCoaching    String   // "conversion", "seguimiento", "cierre", "presentacion"
  problemasIdentificados String @db.Text // JSON
  planMejora      String   @db.Text
  fechaSesion     DateTime
  duracion        Int?     // minutos
  resultados      String?  @db.Text
  proximaSesion   DateTime?
  completado      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  vendedor        User     @relation("CoachingVendedor", fields: [vendedorId], references: [id])
  gerente         User     @relation("CoachingGerente", fields: [gerenteId], references: [id])
  
  @@map("sesiones_coaching")
}

// Grabaciones de Conversaciones (Para transcripción y análisis)
model GrabacionConversacion {
  id                    Int      @id @default(autoincrement())
  prospectoId           Int
  vendedorId            String
  tipoLlamada           String   // "prospectacion", "seguimiento", "cierre", "postventa", "visita_presencial"
  duracion              Int      // segundos
  rutaArchivo           String?  // URL del archivo de audio en Supabase Storage
  rutaArchivoLocal      String?  // Path temporal antes de upload (por compatibilidad)
  transcripcion         String?  @db.Text
  analisisIA            String?  @db.Text // JSON con análisis de IA y pilares SPPC
  analisisPilaresSPPC   String?  @db.Text // JSON específico para los 15 pilares
  proveedorIA           String?  // "deepseek", "openai", "anthropic", "qwen"
  costoTranscripcion    Decimal? @db.Decimal(10, 4) // Costo real del procesamiento
  costoAnalisis         Decimal? @db.Decimal(10, 4) // Costo real del análisis
  fechaGrabacion        DateTime @default(now())
  fechaProcesamiento    DateTime?
  procesado             Boolean  @default(false)
  errorProcesamiento    String?  // Mensaje de error si falla el procesamiento
  calidad               String?  // "EXCELENTE", "BUENA", "REGULAR", "MALA" (basado en duración y claridad)
  palabrasClave         String?  @db.Text // JSON con palabras clave detectadas
  sentimientoGeneral    String?  // "positivo", "neutro", "negativo"
  scoreConversacion     Int?     // Score general de la conversación (1-100)
  observacionesVendedor String?  @db.Text // Notas manuales del vendedor
  
  // Metadatos técnicos
  tamanoArchivo         BigInt?  // Tamaño del archivo en bytes
  formatoAudio          String?  // "wav", "mp3", "m4a", etc.
  calidadAudio          String?  // "alta", "media", "baja"
  dispositivoGrabacion  String?  // "web", "mobile", "desktop"
  ipOrigen              String?  // IP desde donde se hizo la grabación
  
  // Campos específicos para Grabación por Proximidad
  esGrabacionProximidad Boolean  @default(false) // Indica si fue iniciada por proximidad
  zonaProximidadId      Int?     // Zona que activó la grabación
  ubicacionGrabacion    String?  @db.Text // JSON con coordenadas donde se grabó
  tipoActivacionProximidad String? // "automatica", "manual", "confirmacion"
  distanciaZonaMetros   Decimal? @db.Decimal(8, 3) // Distancia promedio a la zona en metros
  precisionGPSGrabacion Decimal? @db.Decimal(8, 3) // Precisión GPS durante la grabación
  contextoProximidad    String?  // "showroom", "test_drive", "entrega", "reunion", "otro"
  
  prospecto             Prospecto @relation(fields: [prospectoId], references: [id])
  vendedor              User      @relation("GrabacionesVendedor", fields: [vendedorId], references: [id])
  
  // Relaciones Grabación por Proximidad
  grabacionesProximidad GrabacionProximidad[] @relation("GrabacionConversacionProximidad")
  
  @@index([vendedorId])
  @@index([prospectoId])
  @@index([fechaGrabacion])
  @@index([procesado])
  @@index([esGrabacionProximidad])
  @@index([zonaProximidadId])
  @@map("grabaciones_conversaciones")
}

// Facturación por servicios de IA
model Factura {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int
  numeroFactura         String   @unique
  mes                   Int
  year                  Int
  fechaGeneracion       DateTime @default(now())
  fechaVencimiento      DateTime
  fechaPago             DateTime?
  estatus               String   @default("PENDIENTE") // "PENDIENTE", "PAGADA", "VENCIDA", "CANCELADA"
  
  // Desglose de servicios
  grabacionesRealizadas Int      @default(0)
  costoPorGrabacion     Decimal  @db.Decimal(10, 2)
  costoTranscripciones  Decimal  @default(0) @db.Decimal(10, 2)
  costoAnalisisIA       Decimal  @default(0) @db.Decimal(10, 2)
  costoAlmacenamiento   Decimal  @default(0) @db.Decimal(10, 2)
  subtotal              Decimal  @db.Decimal(12, 2)
  impuestos             Decimal  @db.Decimal(12, 2)
  total                 Decimal  @db.Decimal(12, 2)
  
  // Detalles adicionales
  detalleServicios      String?  @db.Text // JSON con desglose detallado
  metodoPago            String?  // "transferencia", "tarjeta", "efectivo"
  comprobantePago       String?  // URL del comprobante de pago
  notas                 String?  @db.Text
  
  agencia               Agencia  @relation(fields: [agenciaId], references: [id])
  
  @@unique([agenciaId, mes, year])
  @@index([estatus])
  @@index([fechaVencimiento])
  @@map("facturas")
}

// Reportes Gerenciales Pre-configurados
model ReporteGerencial {
  id              Int      @id @default(autoincrement())
  agenciaId       Int
  tipoReporte     String   // "rendimiento_equipo", "roi_marketing", "analisis_estacional"
  nombreReporte   String
  parametros      String   @db.Text // JSON con parámetros
  fechaGeneracion DateTime
  rutaArchivo     String?  // URL del reporte generado
  compartidoCon   String?  // JSON con IDs de usuarios
  programado      Boolean  @default(false)
  frecuencia      String?  // "diario", "semanal", "mensual"
  createdAt       DateTime @default(now())
  
  agencia         Agencia  @relation(fields: [agenciaId], references: [id])
  
  @@map("reportes_gerenciales")
}

// Alertas del Sistema
model AlertaSistema {
  id           Int      @id @default(autoincrement())
  usuarioId    String
  tipoAlerta   String   // "lead_critico", "sobrecarga_vendedor", "meta_riesgo", "forecast_cambio"
  prioridad    String   // "alta", "media", "baja"
  titulo       String
  mensaje      String
  datos        String?  @db.Text // JSON con datos adicionales
  leida        Boolean  @default(false)
  fechaCreacion DateTime @default(now())
  fechaLectura DateTime?
  accionTomada String?
  
  usuario      User     @relation("AlertasUsuario", fields: [usuarioId], references: [id])
  
  @@map("alertas_sistema")
}

// ================== CENTRO DE LEADS - VENDEDORES DE GUARDIA ==================

// Sistema de vendedores de guardia diario
model VendedorGuardia {
  id            Int      @id @default(autoincrement())
  vendedorId    String
  fecha         DateTime @default(now()) @db.Date // Fecha específica de guardia
  activo        Boolean  @default(true)
  horaInicio    String?  @default("09:00")  // Hora de inicio de guardia
  horaFin       String?  @default("18:00")  // Hora de fin de guardia
  cargaActual   Int      @default(0)       // Carga actual de prospectos asignados
  metaDelDia    Int      @default(5)       // Meta de leads que puede atender
  observaciones String?  // Notas del gerente sobre esta guardia
  creadoPor     String?  // ID del gerente que definió la guardia
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  vendedor      User     @relation("VendedoresGuardia", fields: [vendedorId], references: [id])
  
  @@unique([vendedorId, fecha]) // Un vendedor solo puede tener una guardia por día
  @@index([fecha, activo])
  @@map("vendedores_guardia")
}

// Registro detallado de llamadas entrantes
model RegistroLlamadaEntrante {
  id                  Int      @id @default(autoincrement())
  coordinadorId       String   // ID del coordinador de centro de leads que atendió
  numeroTelefono      String?  // Número desde donde llamaron
  duracionLlamada     Int?     // Duración en segundos
  horaLlamada         DateTime @default(now())
  tipoConsulta        String?  // "informacion", "cotizacion", "cita", "seguimiento"
  calificacionLlamada String?  // "caliente", "tibio", "frio"
  observaciones       String?  @db.Text
  resultadoContacto   String?  // "lead_generado", "informacion_dada", "no_interesado"
  siguienteAccion     String?  // "asignar_vendedor", "llamar_despues", "enviar_info"
  prospectoGeneradoId Int?     // ID del prospecto si se generó uno
  grabacionUrl        String?  // URL de grabación de la llamada si aplica
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  coordinador         User     @relation("LlamadasEntrantesCoordinador", fields: [coordinadorId], references: [id])
  prospectoGenerado   Prospecto? @relation("LlamadaEntrante", fields: [prospectoGeneradoId], references: [id])
  
  @@index([horaLlamada])
  @@index([coordinadorId])
  @@map("registros_llamadas_entrantes")
}

// Registro detallado de visitas al showroom
model VisitaShowroom {
  id                  Int      @id @default(autoincrement())
  coordinadorId       String   // ID del coordinador que atendió la visita
  nombreVisitante     String
  acompanantes        Int      @default(1)  // Número total de personas
  tipoVisita          String?  // "informacion", "test_drive", "cotizacion", "entrega"
  vehiculoInteres     String?  // Vehículo específico de interés
  vehiculoInteresId   Int?     // Referencia al catálogo de vehículos
  tiempoVisita        Int?     // Duración en minutos
  horaIngreso         DateTime @default(now())
  horaSalida          DateTime?
  nivelInteres        String?  // "alto", "medio", "bajo"
  presupuestoMencionado Decimal? @db.Decimal(12, 2)
  formaPagoPreferida  String?  // "contado", "credito", "arrendamiento"
  observaciones       String?  @db.Text
  resultadoVisita     String?  // "lead_generado", "solo_informacion", "test_drive_realizado"
  prospectoGeneradoId Int?     // ID del prospecto si se generó uno
  seguimientoRequerido Boolean @default(false)
  fechaSeguimiento    DateTime?
  fotosVehiculo       String?  // JSON con URLs de fotos tomadas
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  coordinador         User     @relation("VisitasShowroomCoordinador", fields: [coordinadorId], references: [id])
  vehiculoCatalogo    VehiculoCatalogo? @relation("VisitasVehiculoCatalogo", fields: [vehiculoInteresId], references: [id])
  prospectoGenerado   Prospecto? @relation("VisitaShowroom", fields: [prospectoGeneradoId], references: [id])
  
  @@index([horaIngreso])
  @@index([coordinadorId])
  @@map("visitas_showroom")
}

// Sistema de asignación de leads con balanceado de carga
model AsignacionLead {
  id                    Int      @id @default(autoincrement())
  prospectoId           Int
  coordinadorId         String   // Quien hizo la asignación
  vendedorAsignadoId    String   // A quién se asignó
  fechaAsignacion       DateTime @default(now())
  metodologiaAsignacion String   @default("BALANCEADO") // "BALANCEADO", "MANUAL", "URGENTE"
  cargaCoordinadorMomento Int    @default(0)  // Carga que tenía el coordinador al momento
  cargaVendedorMomento   Int     @default(0)  // Carga que tenía el vendedor al momento
  motivoAsignacion      String?  // "guardia_disponible", "especialidad", "urgente", "desbalance_forzado"
  prioridadAsignacion   String   @default("NORMAL") // "BAJA", "NORMAL", "ALTA", "URGENTE"
  notificacionEnviada   Boolean  @default(false)
  fechaNotificacion     DateTime?
  vendedorContacto      Boolean  @default(false) // Si el vendedor ya contactó al prospecto
  fechaPrimerContacto   DateTime?
  resultadoPrimerContacto String? // "contactado", "no_responde", "reagendar", "no_interesado"
  observaciones         String?  @db.Text
  
  prospecto             Prospecto @relation("AsignacionesProspecto", fields: [prospectoId], references: [id])
  coordinador           User     @relation("AsignacionesCoordinador", fields: [coordinadorId], references: [id])
  vendedorAsignado      User     @relation("AsignacionesVendedor", fields: [vendedorAsignadoId], references: [id])
  
  @@unique([prospectoId]) // Un prospecto solo puede tener una asignación activa
  @@index([fechaAsignacion])
  @@index([vendedorAsignadoId])
  @@map("asignaciones_leads")
}

// Alertas de desbalance de carga entre vendedores
model AlertaDesbalance {
  id                  Int      @id @default(autoincrement())
  usuarioId           String   // Gerente o coordinador que debe ver la alerta
  tipoDesbalance      String   // "CARGA_ALTA", "CARGA_DESIGUAL", "VENDEDOR_SOBRECARGADO"
  vendedorAfectadoId  String?  // Vendedor con sobrecarga
  diferenciaDetectada Int      @default(0)  // Diferencia en número de leads
  umbralConfigurado   Int      @default(3)  // Umbral configurado para alertar
  sugerenciaAccion    String?  // "redistribuir", "agregar_vendedor_guardia", "pausar_asignaciones"
  fechaDeteccion      DateTime @default(now())
  estadoAlerta        String   @default("ACTIVA") // "ACTIVA", "EN_PROCESO", "RESUELTA", "IGNORADA"
  accionTomada        String?  // Acción que se tomó para resolver
  fechaResolucion     DateTime?
  observaciones       String?  @db.Text
  datosDesbalance     String?  @db.Text // JSON con datos detallados del desbalance
  
  usuario             User     @relation("AlertasDesbalanceUsuario", fields: [usuarioId], references: [id])
  vendedorAfectado    User?    @relation("AlertasDesbalanceVendedor", fields: [vendedorAfectadoId], references: [id])
  
  @@index([fechaDeteccion, estadoAlerta])
  @@index([usuarioId])
  @@map("alertas_desbalance")
}

// Configuration and Settings
model Configuracion {
  id       Int    @id @default(autoincrement())
  clave    String @unique
  valor    String
  tipo     String @default("string") // "string", "number", "boolean", "json"
  descripcion String?
  updatedAt DateTime @updatedAt
  
  @@map("configuraciones")
}

// File Management
model Archivo {
  id            Int      @id @default(autoincrement())
  nombreOriginal String
  nombreArchivo  String
  rutaArchivo    String
  tipoMime       String
  tamano         BigInt
  categoria      String?  // "reportes", "imagenes", "documentos"
  uploadedBy     String?
  createdAt      DateTime @default(now())
  
  @@map("archivos")
}

// ================== SISTEMA CRM EXTERNO ==================

// Configuraciones de CRM por Agencia
model CrmConfiguration {
  id                      Int      @id @default(autoincrement())
  agenciaId               Int
  nombre                  String   // "Salesforce Principal", "HubSpot Backup"
  crmTipo                 String   // "salesforce", "hubspot", "pipedrive", "zoho", "dynamics", "custom"
  crmApiUrl               String
  crmApiKey               String
  crmSecretKey            String
  webhookUrl              String?
  webhookSecret           String?
  activo                  Boolean  @default(true)
  sincronizacionBidireccional Boolean @default(true)
  frecuenciaSincronizacion Int     @default(15) // minutos
  ultimaSincronizacion    DateTime?
  configuracionAvanzada   String?  @db.Text // JSON con config específica del CRM
  limitesAPI              String?  @db.Text // JSON con límites del proveedor
  credencialesExpiran     DateTime?
  notificarExpiracion     Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  agencia                 Agencia  @relation(fields: [agenciaId], references: [id], onDelete: Cascade)
  mapeosCampos            CrmFieldMapping[]
  logsSync                CrmSyncLog[]
  configuracionesWebhook  WebhookConfiguration[]
  metricas                CrmMetrics[]
  
  @@map("crm_configurations")
}

// Mapeo detallado de campos entre DynamicFin y CRM
model CrmFieldMapping {
  id                    Int      @id @default(autoincrement())
  crmConfigurationId    Int
  entidad               String   // "prospecto", "vehiculo", "venta", "contacto", "interaccion"
  campoDynamicFin       String   // Campo en nuestra base de datos
  campoCrm              String   // Campo correspondiente en el CRM
  tipoDato              String   // "string", "number", "date", "boolean", "json"
  direccionSincronizacion String @default("bidireccional") // "dinamicfin_to_crm", "crm_to_dinamicfin", "bidireccional"
  transformacion        String?  @db.Text // JSON con reglas de transformación
  requerido             Boolean  @default(false)
  valorPorDefecto       String?  // Valor por defecto si el campo está vacío
  validacion            String?  @db.Text // JSON con reglas de validación
  activo                Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  crmConfiguration      CrmConfiguration @relation(fields: [crmConfigurationId], references: [id], onDelete: Cascade)
  
  @@unique([crmConfigurationId, entidad, campoDynamicFin])
  @@map("crm_field_mappings")
}

// Log detallado de sincronizaciones CRM
model CrmSyncLog {
  id                    Int      @id @default(autoincrement())
  crmConfigurationId    Int
  tipoOperacion         String   // "sync_to_crm", "sync_from_crm", "webhook_received", "manual_sync"
  entidad               String   // "prospectos", "vehiculos", "ventas", "contactos"
  accion                String   // "create", "update", "delete", "bulk_sync"
  estadoSync            String   // "exitoso", "error", "parcial", "en_proceso"
  registrosProcesados   Int      @default(0)
  registrosExitosos     Int      @default(0)
  registrosFallidos     Int      @default(0)
  tiempoEjecucion       Decimal? @db.Decimal(8, 3) // segundos
  detalleOperacion      String?  @db.Text // JSON con detalles de la operación
  errores               String?  @db.Text // JSON con errores específicos
  datosEnviados         String?  @db.Text // JSON con datos enviados (para debug)
  respuestaCrm          String?  @db.Text // JSON con respuesta del CRM
  codigoRespuesta       Int?     // HTTP status code
  usuarioId             String?  // Usuario que inició la sync (si fue manual)
  ipOrigen              String?  // IP desde donde se inició
  fechaInicio           DateTime @default(now())
  fechaFin              DateTime?
  notificacionEnviada   Boolean  @default(false)
  
  crmConfiguration      CrmConfiguration @relation(fields: [crmConfigurationId], references: [id], onDelete: Cascade)
  usuario               User?    @relation("CrmSyncLogUsuario", fields: [usuarioId], references: [id])
  
  @@index([fechaInicio])
  @@index([estadoSync])
  @@index([crmConfigurationId, estadoSync])
  @@map("crm_sync_logs")
}

// Configuración de Webhooks CRM
model WebhookConfiguration {
  id                    Int      @id @default(autoincrement())
  crmConfigurationId    Int
  tipoWebhook           String   // "entrante", "saliente", "bidireccional"
  evento                String   // "prospecto_creado", "venta_cerrada", "contacto_actualizado", "lead_qualified"
  url                   String   // URL del webhook
  metodoHttp            String   @default("POST") // "POST", "PUT", "PATCH"
  headers               String?  @db.Text // JSON con headers custom
  secretoValidacion     String?  // Secret para validar webhooks entrantes
  formatoPayload        String   @default("json") // "json", "xml", "form"
  templatePayload       String?  @db.Text // Template del payload a enviar
  condicionesFiltro     String?  @db.Text // JSON con condiciones para ejecutar webhook
  reintentosMaximos     Int      @default(3)
  tiempoEsperaReintentos Int     @default(30) // segundos
  activo                Boolean  @default(true)
  ultimaEjecucion       DateTime?
  vecesEjecutado        Int      @default(0)
  vecesExitoso          Int      @default(0)
  vecesFallido          Int      @default(0)
  observaciones         String?  @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  crmConfiguration      CrmConfiguration @relation(fields: [crmConfigurationId], references: [id], onDelete: Cascade)
  ejecuciones           WebhookExecution[]
  
  @@map("webhook_configurations")
}

// Log de ejecuciones de webhooks
model WebhookExecution {
  id                    Int      @id @default(autoincrement())
  webhookConfigurationId Int
  tipoEjecucion         String   // "automatica", "manual", "reintento"
  payloadEnviado        String?  @db.Text // JSON con payload enviado
  payloadRecibido       String?  @db.Text // JSON con payload recibido
  respuestaWebhook      String?  @db.Text // Respuesta del endpoint
  codigoRespuesta       Int?     // HTTP status code
  tiempoRespuesta       Decimal? @db.Decimal(8, 3) // milisegundos
  estadoEjecucion       String   // "exitoso", "fallido", "timeout", "reintentando"
  errorDetalle          String?  @db.Text // Detalle del error si falló
  numeroReintento       Int      @default(0) // 0 = primer intento
  ipOrigen              String?  // IP desde donde vino el webhook (para entrantes)
  userAgent             String?  // User agent del sistema que envió
  fechaEjecucion        DateTime @default(now())
  fechaProximoReintento DateTime?
  
  webhookConfiguration  WebhookConfiguration @relation(fields: [webhookConfigurationId], references: [id], onDelete: Cascade)
  
  @@index([fechaEjecucion])
  @@index([estadoEjecucion])
  @@map("webhook_executions")
}

// Métricas de rendimiento CRM
model CrmMetrics {
  id                    Int      @id @default(autoincrement())
  crmConfigurationId    Int
  fecha                 DateTime @db.Date
  totalSincronizaciones Int      @default(0)
  sincronizacionesExitosas Int   @default(0)
  sincronizacionesFallidas Int   @default(0)
  prospectosSincronizados Int    @default(0)
  vehiculosSincronizados Int     @default(0)
  ventasSincronizadas   Int      @default(0)
  contactosSincronizados Int     @default(0)
  webhooksEnviados      Int      @default(0)
  webhooksRecibidos     Int      @default(0)
  tiempoPromedioSync    Decimal? @db.Decimal(8, 3) // segundos promedio
  rateLimitHits         Int      @default(0) // Cuántas veces llegamos al límite de API
  errorRate             Decimal? @db.Decimal(5, 2) // Porcentaje de error
  datosVolumen          Decimal? @db.Decimal(12, 2) // MB de datos transferidos
  costoOperacional      Decimal? @db.Decimal(10, 2) // Costo por uso de API
  uptime                Decimal? @db.Decimal(5, 2) // Porcentaje uptime del CRM
  latenciaPromedio      Int?     // millisegundos promedio de respuesta
  createdAt             DateTime @default(now())
  
  crmConfiguration      CrmConfiguration @relation(fields: [crmConfigurationId], references: [id], onDelete: Cascade)
  
  @@unique([crmConfigurationId, fecha])
  @@index([fecha])
  @@map("crm_metrics")
}

// ================== SISTEMA DE GRABACIÓN POR PROXIMIDAD ==================

// Definición de zonas de proximidad geográficas
model ZonaProximidad {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int
  nombre                String   // "Showroom Principal", "Área Test Drive", "Estacionamiento"
  descripcion           String?
  tipo                  String   // "showroom", "test_drive", "estacionamiento", "oficina", "custom"
  // Coordenadas del centro de la zona
  latitud               Decimal  @db.Decimal(10, 8)
  longitud              Decimal  @db.Decimal(11, 8)
  // Radio de proximidad en metros
  radioMetros           Int      @default(50)
  // Coordenadas para zona poligonal (opcional)
  coordenadas           String?  @db.Text // JSON con array de coordenadas para polígono
  // Configuración de grabación
  activarGrabacion      Boolean  @default(true)
  tipoGrabacion         String   @default("automatica") // "automatica", "confirmacion", "manual"
  duracionMaxima        Int      @default(3600) // segundos
  calidadGrabacion      String   @default("media") // "baja", "media", "alta"
  // Notificaciones
  notificarEntrada      Boolean  @default(true)
  notificarSalida       Boolean  @default(true)
  notificarGerente      Boolean  @default(false)
  // Horarios activos
  horariosActivos       String?  @db.Text // JSON con horarios de activación
  diasActivos           String   @default("1,2,3,4,5,6,7") // Días de la semana activos
  // Estado
  activo                Boolean  @default(true)
  creadoPor             String?  // ID del usuario que creó la zona
  observaciones         String?  @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  agencia               Agencia  @relation(fields: [agenciaId], references: [id], onDelete: Cascade)
  configuraciones       ConfiguracionProximidad[]
  grabaciones           GrabacionProximidad[]
  logs                  LogProximidad[]

  @@index([agenciaId])
  @@index([activo])
  @@map("zonas_proximidad")
}

// Configuración personalizada por vendedor
model ConfiguracionProximidad {
  id                    Int      @id @default(autoincrement())
  vendedorId            String
  zonaProximidadId      Int?     // null = configuración global del vendedor
  // Configuración de activación
  sistemaActivo         Boolean  @default(true)
  modoFuncionamiento    String   @default("automatico") // "automatico", "manual", "pausado"
  // Configuración de detección
  precisonGPS           String   @default("alta") // "baja", "media", "alta"
  intervaloDeteccion    Int      @default(30) // segundos entre verificaciones
  // Configuración de grabación
  inicioAutomatico      Boolean  @default(true)
  confirmarAntes        Boolean  @default(false) // Pedir confirmación antes de grabar
  grabarEnBackground    Boolean  @default(true) // Permitir grabación en background
  notificacionesSonido  Boolean  @default(true)
  notificacionesVibrar  Boolean  @default(true)
  // Configuración de calidad
  calidadAudio          String   @default("media") // "baja", "media", "alta"
  compresionAudio       String   @default("media") // "baja", "media", "alta"
  cancelarRuido         Boolean  @default(true)
  // Configuración de privacidad
  compartirUbicacion    Boolean  @default(true) // Compartir ubicación con gerente
  almacenarUbicaciones  Boolean  @default(true) // Guardar histórico de ubicaciones
  // Configuración de alertas
  alertarGerente        Boolean  @default(false)
  alertarEquipo         Boolean  @default(false)
  // Configuración de horarios
  horariosPersonalizados String? @db.Text // JSON con horarios específicos del vendedor
  zonasExcluidas        String?  @db.Text // JSON con IDs de zonas excluidas
  // Estado y metadata
  activo                Boolean  @default(true)
  ultimaConfiguracion   DateTime @default(now())
  observaciones         String?  @db.Text
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  vendedor              User     @relation("ConfiguracionProximidadVendedor", fields: [vendedorId], references: [id], onDelete: Cascade)
  zonaProximidad        ZonaProximidad? @relation(fields: [zonaProximidadId], references: [id])
  grabaciones           GrabacionProximidad[]

  @@unique([vendedorId, zonaProximidadId])
  @@index([vendedorId])
  @@map("configuraciones_proximidad")
}

// Grabaciones automáticas por proximidad (extiende el sistema existente)
model GrabacionProximidad {
  id                    Int      @id @default(autoincrement())
  grabacionConversacionId Int?   // Referencia a la grabación principal (puede ser null si falló)
  vendedorId            String
  zonaProximidadId      Int
  configuracionProximidadId Int?
  prospectoId           Int?     // Prospecto asociado si existe
  // Datos de detección de proximidad
  ubicacionDetectada    String   @db.Text // JSON con coordenadas de detección
  tiempoEnZona          Int?     // segundos que estuvo en la zona
  horaEntrada           DateTime
  horaSalida            DateTime?
  // Estado de la grabación automática
  estadoGrabacion       String   // "iniciada", "en_curso", "completada", "fallida", "cancelada"
  tipoActivacion        String   // "automatica", "manual", "confirmacion"
  motivoCancelacion     String?  // Razón si fue cancelada
  // Configuración aplicada
  configuracionAplicada String   @db.Text // JSON con configuración que se aplicó
  calidadDetectada      String?  // Calidad final de la grabación
  // Metadata de proximidad
  distanciaPromedio     Decimal? @db.Decimal(8, 3) // metros promedio de distancia al centro
  precisionGPS          Decimal? @db.Decimal(8, 3) // metros de precisión GPS
  velocidadDetectada    Decimal? @db.Decimal(8, 3) // km/h velocidad promedio
  // Análisis automático de contexto
  contextoDetectado     String?  // "reunion", "test_drive", "entrega", "visita", "otro"
  nivelRuidoAmbiente    String?  // "bajo", "medio", "alto"
  tiempoSinActividad    Int?     // segundos sin actividad detectada
  // Notificaciones enviadas
  notificacionVendedor  Boolean  @default(false)
  notificacionGerente   Boolean  @default(false)
  fechaNotificacion     DateTime?
  // Control de errores
  erroresDeteccion      String?  @db.Text // JSON con errores durante la detección
  intentosReactivacion  Int      @default(0)
  // Metadata
  dispositivoDeteccion  String?  // "android", "ios", "web"
  versionApp            String?  // Versión de la app/navegador
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  vendedor              User     @relation("GrabacionProximidadVendedor", fields: [vendedorId], references: [id])
  zonaProximidad        ZonaProximidad @relation(fields: [zonaProximidadId], references: [id])
  configuracionProximidad ConfiguracionProximidad? @relation(fields: [configuracionProximidadId], references: [id])
  prospecto             Prospecto? @relation("GrabacionProximidadProspecto", fields: [prospectoId], references: [id])
  grabacionConversacion GrabacionConversacion? @relation("GrabacionConversacionProximidad", fields: [grabacionConversacionId], references: [id])

  @@index([vendedorId])
  @@index([zonaProximidadId])
  @@index([horaEntrada])
  @@index([estadoGrabacion])
  @@map("grabaciones_proximidad")
}

// Log detallado de detecciones de proximidad
model LogProximidad {
  id                    Int      @id @default(autoincrement())
  vendedorId            String
  zonaProximidadId      Int?     // null si es detección fuera de zonas
  tipoEvento            String   // "entrada_zona", "salida_zona", "deteccion_ubicacion", "error_gps", "grabacion_iniciada", "grabacion_finalizada"
  // Datos de ubicación
  latitud               Decimal? @db.Decimal(10, 8)
  longitud              Decimal? @db.Decimal(11, 8)
  precision             Decimal? @db.Decimal(8, 3) // metros
  altitud               Decimal? @db.Decimal(8, 2) // metros
  velocidad             Decimal? @db.Decimal(8, 3) // km/h
  rumbo                 Decimal? @db.Decimal(6, 3) // grados
  // Datos del evento
  distanciaZona         Decimal? @db.Decimal(8, 3) // metros de distancia al centro de zona
  tiempoEnZona          Int?     // segundos acumulados en la zona
  confianzaDeteccion    Decimal? @db.Decimal(5, 2) // porcentaje de confianza
  // Información del dispositivo
  proveedor             String?  // "gps", "network", "passive"
  tiempoAdquisicion     Int?     // millisegundos para obtener ubicación
  nivelBateria          Int?     // porcentaje de batería
  conectividad          String?  // "wifi", "mobile", "none"
  // Contexto de la detección
  enLlamada             Boolean  @default(false)
  enGrabacion           Boolean  @default(false)
  appEnForeground       Boolean  @default(true)
  permisosConcedidos    String?  @db.Text // JSON con estado de permisos
  // Metadata
  timestamp             DateTime @default(now())
  observaciones         String?  @db.Text
  datosAdicionales      String?  @db.Text // JSON con datos extra para debug

  vendedor              User     @relation("LogProximidadVendedor", fields: [vendedorId], references: [id])
  zonaProximidad        ZonaProximidad? @relation(fields: [zonaProximidadId], references: [id])

  @@index([vendedorId, timestamp])
  @@index([zonaProximidadId, timestamp])
  @@index([tipoEvento])
  @@map("logs_proximidad")
}

// Métricas diarias de uso del sistema de proximidad
model MetricasProximidad {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int
  fecha                 DateTime @db.Date
  // Métricas de detección
  totalDetecciones      Int      @default(0)
  deteccionesExitosas   Int      @default(0)
  erroresDeteccion      Int      @default(0)
  zonasActivas          Int      @default(0) // Zonas que tuvieron actividad
  // Métricas de grabación
  grabacionesIniciadas  Int      @default(0)
  grabacionesCompletadas Int     @default(0)
  grabacionesFallidas   Int      @default(0)
  grabacionesCanceladas Int      @default(0)
  duracionPromedio      Decimal? @db.Decimal(8, 2) // minutos promedio
  // Métricas de vendedores
  vendedoresActivos     Int      @default(0) // Vendedores que usaron el sistema
  tiempoPromedioZona    Decimal? @db.Decimal(8, 2) // minutos promedio en zonas
  // Métricas de calidad
  calidadPromedioGPS    Decimal? @db.Decimal(8, 3) // metros de precisión promedio
  tiempoRespuestaPromedio Decimal? @db.Decimal(8, 3) // segundos promedio para detectar
  // Métricas de sistema
  notificacionesEnviadas Int     @default(0)
  alertasGeneradas      Int      @default(0)
  errorRate             Decimal? @db.Decimal(5, 2) // Porcentaje de errores
  // Métricas de recursos
  consumoBateria        Decimal? @db.Decimal(5, 2) // Porcentaje promedio consumido
  usoAlmacenamiento     Decimal? @db.Decimal(10, 2) // MB usados
  transferenciaDatos    Decimal? @db.Decimal(10, 2) // MB transferidos
  createdAt             DateTime @default(now())

  agencia               Agencia  @relation(fields: [agenciaId], references: [id], onDelete: Cascade)

  @@unique([agenciaId, fecha])
  @@index([fecha])
  @@map("metricas_proximidad")
}

// ================== SISTEMA DE ROLE PLAY PARA ENTRENAMIENTOS ==================

// Escenarios de Role Play para entrenamiento de ventas
model RolePlayScenario {
  id                    Int      @id @default(autoincrement())
  titulo                String   // "Cliente indeciso que 'necesita pensarlo'"
  descripcion           String   @db.Text // Descripción detallada del escenario
  categoria             String   // "prospectacion", "objeciones", "cierre", "situaciones_dificiles"
  nivelDificultad       String   @default("medio") // "principiante", "medio", "avanzado", "experto"
  tipoCliente           String   // "indeciso", "precio_sensible", "tecnico", "impulsivo", "desconfiado"
  personalidadCliente   String   @db.Text // JSON con características de personalidad del cliente IA
  vehiculoInteres       String?  // Tipo de vehículo de interés
  presupuestoCliente    Decimal? @db.Decimal(12, 2) // Presupuesto del cliente ficticio
  objetivosAprendizaje  String   @db.Text // JSON con objetivos específicos de aprendizaje
  objecionesComunes     String   @db.Text // JSON con objeciones que el cliente IA puede usar
  contextoPreventa      String?  @db.Text // Contexto previo de la situación de venta
  duracionEstimada      Int      @default(15) // minutos
  pilaresEvaluados      String   @db.Text // JSON con IDs de pilares SPCC que evalúa este escenario
  activo                Boolean  @default(true)
  etiquetas             String?  @db.Text // JSON con tags para filtrado
  dificultadPromedio    Decimal? @db.Decimal(3, 2) // Puntuación promedio de dificultad (1-10)
  completadoVeces       Int      @default(0) // Contador de veces que se ha completado
  puntuacionPromedio    Decimal? @db.Decimal(5, 2) // Puntuación promedio obtenida (0-100)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relaciones
  sessions              RolePlaySession[] @relation("RolePlayScenarioSessions")
  
  @@index([categoria, nivelDificultad])
  @@index([tipoCliente])
  @@index([activo])
  @@map("roleplay_scenarios")
}

// Sesiones de Role Play entre vendedor y IA
model RolePlaySession {
  id                    Int      @id @default(autoincrement())
  vendedorId            String
  scenarioId            Int
  fechaInicio           DateTime @default(now())
  fechaFin              DateTime?
  duracionMinutos       Int?     // Duración real de la sesión
  estadoSession         String   @default("iniciada") // "iniciada", "en_progreso", "completada", "abandonada"
  conversacionCompleta  String?  @db.Text // JSON con el historial completo de mensajes
  totalMensajes         Int      @default(0) // Contador de mensajes intercambiados
  mensajesVendedor      Int      @default(0) // Mensajes enviados por el vendedor
  mensajesClienteIA     Int      @default(0) // Respuestas del cliente IA
  configuracionIA       String?  @db.Text // JSON con configuración específica de IA usada
  modeloIAUtilizado     String?  // "gpt-4", "deepseek", etc.
  costoIATotal          Decimal? @db.Decimal(8, 4) // Costo total en IA de la sesión
  tokensTotales         Int      @default(0) // Total de tokens consumidos
  tokensPrompt          Int      @default(0) // Tokens de prompt
  tokensCompletion      Int      @default(0) // Tokens de completion
  metadataSession       String?  @db.Text // JSON con metadatos adicionales
  ipOrigen              String?  // IP desde donde se realizó la sesión
  dispositivoUsado      String?  // "web", "mobile"
  
  // Campos para análisis
  objetivoCumplido      Boolean  @default(false) // Si se cumplió el objetivo de aprendizaje
  ventaLograda          Boolean  @default(false) // Si se logró cerrar la "venta"
  clienteSatisfecho     Boolean  @default(false) // Evaluación del cliente IA
  observacionesVendedor String?  @db.Text // Notas del vendedor post-sesión
  
  vendedor              User     @relation("RolePlaySessionsVendedor", fields: [vendedorId], references: [id])
  scenario              RolePlayScenario @relation("RolePlayScenarioSessions", fields: [scenarioId], references: [id])
  evaluations           RolePlayEvaluation[] @relation("RolePlaySessionEvaluations")
  feedback              RolePlayFeedback[] @relation("RolePlaySessionFeedback")
  
  @@index([vendedorId, fechaInicio])
  @@index([scenarioId])
  @@index([estadoSession])
  @@index([fechaInicio])
  @@map("roleplay_sessions")
}

// Evaluaciones automáticas de las sesiones de Role Play
model RolePlayEvaluation {
  id                    Int      @id @default(autoincrement())
  sessionId             Int
  vendedorId            String
  tipoEvaluacion        String   // "automatica_ia", "manual_gerente", "autoevaluacion"
  puntuacionGeneral     Decimal  @db.Decimal(5, 2) // Puntuación general (0-100)
  puntuacionesPilares   String   @db.Text // JSON con puntuaciones por pilar SPCC
  fortalezasDetectadas  String   @db.Text // JSON con fortalezas identificadas
  areasDeporMejora      String   @db.Text // JSON con áreas que necesitan mejora
  tecnicasUtilizadas    String   @db.Text // JSON con técnicas de venta utilizadas
  objecionesManejadas   String   @db.Text // JSON con objeciones manejadas correctamente
  objecionesFallidas    String   @db.Text // JSON con objeciones mal manejadas
  tiempoRespuestaPromedio Decimal? @db.Decimal(8, 3) // segundos promedio de respuesta
  calidadPreguntas      Decimal? @db.Decimal(3, 2) // Calidad de las preguntas (1-10)
  escuchActiva          Decimal? @db.Decimal(3, 2) // Nivel de escucha activa (1-10)
  cierreEfectivo        Decimal? @db.Decimal(3, 2) // Efectividad en el cierre (1-10)
  rapportCliente        Decimal? @db.Decimal(3, 2) // Construcción de rapport (1-10)
  manejoObjeciones      Decimal? @db.Decimal(3, 2) // Manejo de objeciones (1-10)
  conocimientoProducto  Decimal? @db.Decimal(3, 2) // Conocimiento del producto (1-10)
  adaptabilidad         Decimal? @db.Decimal(3, 2) // Adaptabilidad al cliente (1-10)
  profesionalismo       Decimal? @db.Decimal(3, 2) // Profesionalismo mostrado (1-10)
  analisisIA            String?  @db.Text // JSON con análisis detallado de IA
  recomendacionesIA     String?  @db.Text // JSON con recomendaciones específicas
  puntuacionAntesVsDespues String? @db.Text // JSON comparando con evaluaciones previas
  mejoraDetectada       Boolean  @default(false) // Si se detectó mejora vs sesiones anteriores
  fechaEvaluacion       DateTime @default(now())
  modeloIAEvaluador     String?  // Modelo de IA que hizo la evaluación
  costoEvaluacion       Decimal? @db.Decimal(8, 4) // Costo de la evaluación IA
  
  session               RolePlaySession @relation("RolePlaySessionEvaluations", fields: [sessionId], references: [id])
  vendedor              User     @relation("RolePlayEvaluationsVendedor", fields: [vendedorId], references: [id])
  
  @@index([vendedorId, fechaEvaluacion])
  @@index([sessionId])
  @@index([puntuacionGeneral])
  @@map("roleplay_evaluations")
}

// Progreso y métricas de Role Play por vendedor
model RolePlayProgress {
  id                      Int      @id @default(autoincrement())
  vendedorId              String
  mes                     Int
  año                     Int
  totalSesiones           Int      @default(0)
  totalMinutosEntrenados  Int      @default(0) // Total de minutos practicando
  sesionesCompletadas     Int      @default(0)
  sesionesAbandonadas     Int      @default(0)
  promedioCompletitud     Decimal? @db.Decimal(5, 2) // Porcentaje promedio de completitud
  puntuacionPromedio      Decimal? @db.Decimal(5, 2) // Puntuación promedio obtenida
  puntuacionMejor         Decimal? @db.Decimal(5, 2) // Mejor puntuación obtenida
  puntuacionUltimaSemana  Decimal? @db.Decimal(5, 2) // Promedio de la última semana
  mejoraGeneral           Decimal? @db.Decimal(5, 2) // Mejora % vs mes anterior
  escenariosFuertes       String?  @db.Text // JSON con escenarios donde destaca
  escenariosDebiles       String?  @db.Text // JSON con escenarios que necesita mejorar
  pilaresFortaleza        String?  @db.Text // JSON con pilares SPCC fuertes
  pilaresOportunidad      String?  @db.Text // JSON con pilares SPCC a mejorar
  objetivosLogrados       Int      @default(0) // Objetivos de aprendizaje cumplidos
  ventasSimuladas         Int      @default(0) // Número de "ventas" cerradas en simulaciones
  tasaExitoSimulaciones   Decimal? @db.Decimal(5, 2) // % de éxito cerrando simulaciones
  tiempoPromedioSesion    Decimal? @db.Decimal(8, 3) // Minutos promedio por sesión
  consistenciaEntrenamientos Decimal? @db.Decimal(5, 2) // Consistencia en entrenamientos
  nivelActual             String   @default("principiante") // "principiante", "medio", "avanzado", "experto"
  puntosGameficacion      Int      @default(0) // Puntos de gamificación acumulados
  badgesObtenidos         String?  @db.Text // JSON con badges/logros obtenidos
  rachaActual             Int      @default(0) // Días consecutivos entrenando
  rachaMejor              Int      @default(0) // Mejor racha conseguida
  ultimaActividad         DateTime?
  metasSesiones           Int      @default(5) // Meta de sesiones por mes
  metasMinutos            Int      @default(150) // Meta de minutos por mes
  fechaCalculado          DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  vendedor                User     @relation("RolePlayProgressVendedor", fields: [vendedorId], references: [id])
  
  @@unique([vendedorId, mes, año])
  @@index([vendedorId])
  @@index([puntuacionPromedio])
  @@index([nivelActual])
  @@map("roleplay_progress")
}

// Feedback detallado y sugerencias de mejora
model RolePlayFeedback {
  id                    Int      @id @default(autoincrement())
  sessionId             Int
  vendedorId            String
  tipoFeedback          String   // "positivo", "constructivo", "corrective", "sugerencia"
  categoria             String   // "tecnicas_cierre", "manejo_objeciones", "rapport", "conocimiento_producto"
  momentoSession        String   // "inicio", "desarrollo", "cierre", "general"
  feedbackTexto         String   @db.Text // Texto del feedback específico
  sugerenciaMejora      String?  @db.Text // Sugerencia específica de mejora
  ejemploMejorado       String?  @db.Text // Ejemplo de cómo podría haberse manejado mejor
  recursosRecomendados  String?  @db.Text // JSON con recursos de entrenamiento recomendados
  pilarSPCCRelacionado  Int?     // ID del pilar SPCC al que se refiere
  prioridad             String   @default("media") // "baja", "media", "alta", "critica"
  implementado          Boolean  @default(false) // Si el vendedor implementó la sugerencia
  utilidad              Int?     // Calificación de utilidad del feedback (1-5)
  fechaImplementacion   DateTime?
  notasImplementacion   String?  @db.Text // Notas del vendedor sobre implementación
  feedbackGeneradoPor   String   // "ia_automatica", "gerente", "autoanalsisis"
  modeloIAUsado         String?  // Si fue generado por IA
  costoGeneracion       Decimal? @db.Decimal(8, 4) // Costo de generar el feedback
  fechaCreacion         DateTime @default(now())
  fechaVisto            DateTime? // Cuándo fue visto por el vendedor
  fechaArchivado        DateTime? // Cuándo fue archivado/resuelto
  estadoFeedback        String   @default("nuevo") // "nuevo", "visto", "en_proceso", "implementado", "archivado"
  
  session               RolePlaySession @relation("RolePlaySessionFeedback", fields: [sessionId], references: [id])
  vendedor              User     @relation("RolePlayFeedbackVendedor", fields: [vendedorId], references: [id])
  
  @@index([vendedorId, fechaCreacion])
  @@index([sessionId])
  @@index([categoria, prioridad])
  @@index([estadoFeedback])
  @@map("roleplay_feedback")
}

// Configuración del sistema de Role Play por agencia
model RolePlayConfiguration {
  id                    Int      @id @default(autoincrement())
  agenciaId             Int?     // Null para configuración global
  habilitado            Boolean  @default(true)
  sesionesMaximasPorDia Int      @default(10) // Límite de sesiones por vendedor por día
  duracionMaximaSesion  Int      @default(30) // Minutos máximos por sesión
  nivelMinimoDificultad String   @default("principiante") // Nivel mínimo permitido
  evaluacionAutomatica  Boolean  @default(true) // Si se evalúa automáticamente
  feedbackTiempoReal    Boolean  @default(true) // Feedback durante la sesión
  gamificacionHabilitada Boolean @default(true) // Sistema de puntos y badges
  costoPorSesion        Decimal  @default(0.25) @db.Decimal(8, 4) // Costo por sesión en IA
  limiteCostosAlerta    Decimal  @default(50.00) @db.Decimal(10, 2) // Alerta cuando se supere
  proveedorIAPreferido  String   @default("openai") // Proveedor de IA preferido
  modeloIAEvaluacion    String   @default("gpt-4o-mini") // Modelo para evaluación
  modeloIAConversacion  String   @default("gpt-4o-mini") // Modelo para conversación
  promptsPersonalizados String?  @db.Text // JSON con prompts personalizados por agencia
  restriccionesHorario  String?  @db.Text // JSON con horarios permitidos
  configuracionAvanzada String?  @db.Text // JSON con configuración adicional
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@unique([agenciaId])
  @@map("roleplay_configurations")
}
